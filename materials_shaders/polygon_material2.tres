[gd_resource type="ShaderMaterial" load_steps=12 format=3 uid="uid://dh8kftxvvfji1"]

[sub_resource type="Shader" id="Shader_cxfxb"]
code = "shader_type canvas_item;

uniform sampler2D noise1 : repeat_enable;
uniform sampler2D noise2 : repeat_enable;
uniform sampler2D noise3 : repeat_enable;

uniform sampler2D colorTexture;

uniform float speed = 1.0;
uniform vec2 scroll1 = vec2(0.1, 0.1);
uniform vec2 scroll2 = vec2(0.2, 0.2);
const float mid = 0.5;

uniform float distortion_strength : hint_range(0.05, 1.0) = 0.1;
uniform sampler2D distortion_noise : repeat_enable;

void fragment() {
//	float pct = 0.0;
//	pct = distance(UV,vec2(0.5));
//	float speed = pct;
	vec2 rotation_cw_uv = vec2(cos(TIME*speed) * (UV.x - mid) + sin(TIME*speed) * (UV.y - mid) + mid, cos(TIME*speed) * (UV.y - mid) - sin(TIME*speed) * (UV.x - mid) + mid);
	vec2 rotation_ccw_uv = vec2(cos(TIME*speed) * (UV.x - mid) - sin(TIME*speed) * (UV.y - mid) + mid, cos(TIME*speed) * (UV.y - mid) + sin(TIME*speed) * (UV.x - mid) + mid);
//	float new_color1 = texture(noise1, rotation_cw_uv + scroll1).r;
//	float new_color2 = texture(noise2, rotation_ccw_uv + scroll2).r;

	
	
//	vec3 new_color = vec3(noise_r, noise_g, noise_b);
	float new_color1 = texture(noise1, UV + scroll1 * speed * TIME).r;
	float new_color2 = texture(noise2, UV - scroll2 * speed * TIME).r;
	float new_color3 = texture(noise3, vec2(UV.x + scroll2.x * speed * TIME, UV.y - scroll2.y * speed * TIME)).r;
	
	float energy = new_color1 * new_color2 * new_color3;
	float distortion_noise_value =  texture(distortion_noise, rotation_cw_uv).r;
	vec3 color = texture(colorTexture, vec2(energy) - (distortion_strength / 2.0) + vec2(distortion_noise_value) * distortion_strength).rgb;
	float alpha = texture(colorTexture, vec2(energy) - (distortion_strength / 2.0) + vec2(distortion_noise_value) * distortion_strength).a;
//		vec3 color = texture(colorTexture, vec2(energy)).rgb;
	COLOR.rgb = color.rgb;
	COLOR.a = alpha;
//	COLOR = texture(colorTexture, vec2(new_color1 * new_color2));
//	COLOR.rgb = texture(TEXTURE, UV).rgb;
//	COLOR.rgb = new_color1.rgb;
//	COLOR.a = clamp(new_alpha * 10.0 * texture(TEXTURE, UV).a, 0.0, 1.0);
}"

[sub_resource type="Gradient" id="Gradient_kagrh"]
offsets = PackedFloat32Array(0, 0.508834, 1)
colors = PackedColorArray(0, 0, 0, 1, 0.677461, 0.685904, 0.581043, 1, 1, 1, 1, 1)

[sub_resource type="GradientTexture1D" id="GradientTexture1D_1mn0q"]
gradient = SubResource("Gradient_kagrh")

[sub_resource type="FastNoiseLite" id="FastNoiseLite_w7as7"]
seed = 4
fractal_type = 3
fractal_octaves = 1

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_squkv"]
seamless = true
noise = SubResource("FastNoiseLite_w7as7")

[sub_resource type="FastNoiseLite" id="FastNoiseLite_6clni"]
seed = 1
fractal_type = 3
fractal_octaves = 1

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_xbrcp"]
seamless = true
noise = SubResource("FastNoiseLite_6clni")

[sub_resource type="FastNoiseLite" id="FastNoiseLite_0t84g"]
seed = 2
fractal_type = 3
fractal_octaves = 1

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_fud2s"]
seamless = true
noise = SubResource("FastNoiseLite_0t84g")

[sub_resource type="FastNoiseLite" id="FastNoiseLite_8xvf3"]
seed = 3
fractal_type = 3
fractal_octaves = 1

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_5ikib"]
seamless = true
noise = SubResource("FastNoiseLite_8xvf3")

[resource]
shader = SubResource("Shader_cxfxb")
shader_parameter/speed = 0.01
shader_parameter/scroll1 = Vector2(0.1, 0.1)
shader_parameter/scroll2 = Vector2(0.2, 0.2)
shader_parameter/distortion_strength = 0.05
shader_parameter/noise1 = SubResource("NoiseTexture2D_xbrcp")
shader_parameter/noise2 = SubResource("NoiseTexture2D_fud2s")
shader_parameter/noise3 = SubResource("NoiseTexture2D_5ikib")
shader_parameter/colorTexture = SubResource("GradientTexture1D_1mn0q")
shader_parameter/distortion_noise = SubResource("NoiseTexture2D_squkv")
